from bs4 import BeautifulSoup
import requests


def weather_forecast_tomorrow():
    """
    :return: ['Прогноз погоды по Мурманской области на 9 декабря.', 'Облачная с прояснениями погода. Местами
    небольшой снег. В отдельных районах туман, изморозь. Ветер ночью западный, днем северо-восточный умеренный.
    Температура воздуха ночью -8-13°, при прояснениях до -18°, днем -3-8°, при прояснениях до -13°. Гололедица.',
    'Погода 8.12.2019 в 12.00\nМурманск\n-5\nВетер: юз 2-3 м/с\nДавление: 729 мм.рт.ст.\nУровень радиации: 10  мкр/ч']
    """
    url = 'http://www.kolgimet.ru/'
    html = requests.get(url).text
    soup = BeautifulSoup(html, "lxml")

    t = [soup.find('h1').text.strip(), soup.find_all('p')[3].text.strip(),
         soup.find('div', attrs={'class': 'weatherce-main'}).text.strip()]

    return t


def get_title(lst):
    """
    :param lst:
    :return: Прогноз на 9 декабря.
    """
    print(lst)
    lst[0] = " ".join(lst[0].split())
    lst[0] = lst[0].split(' ')
    new_lst = []
    # print(lst[0])
    for elem in lst[0]:
        if lst[0].index(elem) == 0 or lst[0].index(elem) == 5 or lst[0].index(elem) == 6 or lst[0].index(elem) == 7 or \
                lst[0].index(elem) == 8:
            new_lst.append(elem)
    title = ' '.join(new_lst)
    return title


def get_general_information(lst):
    new_lst = []
    lst[2] = lst[2].split('\n')
    # print(lst[2])
    for elem in lst[2]:
        if lst[2].index(elem) == 0 or lst[2].index(elem) == 2 or lst[2].index(elem) == 3:
            new_lst.append(elem)
    # print(new_lst)
    # print("\n".join(new_lst))
    return new_lst


def get_temp_and_wind(lst):
    wind = lst[2].split(' ')[2].split('-')
    if len(wind) > 1:
        wnd = (int(wind[1]) + int(wind[0])) / 2
    else:
        wnd = wind[0]
    temp = int(lst[1])
    # print(wnd)
    # print(temp)
    # print(new_lst)
    return temp, wnd


def get_wind_chill(t, w):
    # t = 24
    # w = 6
    print(w)
    wkm = float(w) * 3.6
    rezult = 13.12 + (0.6215 * t) - (11.37 * (wkm ** 0.16)) + (0.3965 * t * (wkm ** 0.16))
    # print(rezult)
    rezult = round(rezult, 2)
    rezult_description = ''
    if -9 < rezult < 0:
        rezult_description = '''Небольшой риск, некоторый дискомфорт.
Рекомендуется тепло одеваться и оставаться сухим.'''
    elif -27 < rezult < -10:
        rezult_description = '''Дискомфорт, риск гипотермии в случае продолжительного нахождения на воздухе без соответствующей защиты.
Рекомендуется одеваться в несколько слоев теплой одежды, внешний слой не должен пропускать ветра. 
Рекомендуется носить шапку, варежки или перчатки, шарф и закрытую, непромокаемую обувь.
Надо оставаться сухим и на морозе двигаться.'''
    elif -39 < rezult < -28:
        rezult_description = '''Открытая кожа может замерзнуть в течении 10-30 минут. 
Существует риск обморожения: требуется проверять лицо, открытые участки кожи и конечности на окоченение и побеление. 
Риск гипотермии в случае продолжительного нахождения на воздухе без соответствующей одежды или укрытия от холода и ветра.
Рекомендуется одеваться в несколько слоев теплой одежды, внешний слой не должен пропускать ветра.
Рекомендуется не оставлять открытых участков кожи. 
Рекомендуется носить шапку, варежки или перчатки, шарф, маску и закрытую, непромокаемую обувь.
Надо оставаться сухим и на морозе двигаться.'''
    elif -47 < rezult < -40:
        rezult_description = '''Открытая кожа может замерзнуть в течении 5-10 минут.
Высокий риск обморожения: требуется проверять лицо, открытые участки кожи и конечности на окоченение и побеление.
Риск гипотермии в случае продолжительного нахождения на воздухе без соответствующей одежды или укрытия от холода и ветра.
Рекомендуется одеваться в несколько слоев теплой одежды, внешний слой не должен пропускать ветра.
Рекомендуется не оставлять открытых участков кожи. Рекомендуется носить шапку, варежки или перчатки, шарф, маску и закрытую, непромокаемую обувь.
Надо оставаться сухим и на морозе двигаться'''
    elif -54 < rezult < -48:
        rezult_description = '''Открытая кожа может замерзнуть в течении 2–5 минут.
Очень высокий риск обморожения: требуется проверять лицо, открытые участки кожи и конечности на окоченение и побеление.
Серьезный риск гипотермии в случае продолжительного нахождения на воздухе без соответствующей одежды или укрытия от холода и ветра.
Требуется осторожность при пребывании на улице. 
Рекомендуется одеваться в несколько слоев теплой одежды, внешний слой не должен пропускать ветра.
Рекомендуется не оставлять открытых участков кожи. Рекомендуется носить шапку, варежки или перчатки, шарф, маску и закрытую, непромокаемую обувь.
Старайтесь отменить или сократить выходы на улицу. Оставайтесь сухим и двигайтесь.'''
    # print(rezult)
    # print(rezult_description)
    return rezult, rezult_description


if __name__ == '__main__':
    '''Примерная информация
    ['Прогноз погоды по Мурманской области на  день 19 сентября.',
    'Облачная c прояснениями погода. Местами осадки в виде дождя и мокрого снега. Ветер северо-западный, западный\xa0 умеренный, на севере сильный. Температура воздуха +1+6°.',
    'Погода 19.09.2019 в 09.00\nМурманск\n+2\nВетер: з 3-6 м/с\nДавление: 750 мм.рт.ст.\nУровень радиации: 11 мкр/ч']
    '''
    lst = weather_forecast_tomorrow()
    # get_title(lst)
    # info_list = get_general_information(lst)
    # t, w = get_temp_and_wind(info_list)
    print(get_wind_chill(4, 6.5))
